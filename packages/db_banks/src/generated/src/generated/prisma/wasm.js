
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.9.0
 * Query Engine version: 81e4af48011447c3cc503a190e86995b66d2a28e
 */
Prisma.prismaVersion = {
  client: "6.9.0",
  engine: "81e4af48011447c3cc503a190e86995b66d2a28e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  username: 'username',
  number: 'number',
  password: 'password',
  isVerified: 'isVerified'
};

exports.Prisma.CommercialClientsScalarFieldEnum = {
  id: 'id',
  client_id: 'client_id',
  assigned_date: 'assigned_date',
  sharedSecret: 'sharedSecret',
  expiresAt: 'expiresAt'
};

exports.Prisma.AccountsScalarFieldEnum = {
  acc_id: 'acc_id',
  user_id: 'user_id',
  acc_name: 'acc_name',
  acc_number: 'acc_number',
  status: 'status',
  type: 'type',
  bank: 'bank',
  balance: 'balance',
  connectedToMain: 'connectedToMain',
  created_At: 'created_At'
};

exports.Prisma.TransactionsScalarFieldEnum = {
  txn_id: 'txn_id',
  acc_id: 'acc_id',
  status: 'status',
  type: 'type',
  created_At: 'created_At',
  channel: 'channel',
  amount: 'amount',
  category: 'category',
  counterPartyID: 'counterPartyID',
  counterPartyType: 'counterPartyType'
};

exports.Prisma.VerificationScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  otp: 'otp',
  type: 'type',
  expiresAt: 'expiresAt'
};

exports.Prisma.Auth_codesScalarFieldEnum = {
  id: 'id',
  code: 'code',
  user_id: 'user_id',
  client_id: 'client_id',
  redirect_uri: 'redirect_uri',
  createdAt: 'createdAt',
  expiresAt: 'expiresAt',
  used: 'used'
};

exports.Prisma.TokensScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  client_id: 'client_id',
  hashedToken: 'hashedToken',
  bankName: 'bankName',
  created_At: 'created_At',
  expiresAt: 'expiresAt',
  revoked: 'revoked'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.Acc_status = exports.$Enums.Acc_status = {
  active: 'active',
  closed: 'closed',
  frozen: 'frozen'
};

exports.Acc_type = exports.$Enums.Acc_type = {
  savings: 'savings',
  checking: 'checking',
  wallet: 'wallet',
  joint: 'joint',
  business: 'business'
};

exports.Bank_name = exports.$Enums.Bank_name = {
  icici: 'icici',
  sbi: 'sbi',
  hdfc: 'hdfc',
  ubi: 'ubi'
};

exports.Txn_status = exports.$Enums.Txn_status = {
  success: 'success',
  failed: 'failed',
  pending: 'pending'
};

exports.Txn_type = exports.$Enums.Txn_type = {
  credit: 'credit',
  debit: 'debit'
};

exports.Txn_channel = exports.$Enums.Txn_channel = {
  upi: 'upi',
  wallet: 'wallet',
  netbanking: 'netbanking',
  card: 'card',
  cheque: 'cheque',
  cheque_DD: 'cheque_DD',
  RTGS: 'RTGS',
  NEFT: 'NEFT'
};

exports.Txn_Cat = exports.$Enums.Txn_Cat = {
  Utilities: 'Utilities',
  Insurance: 'Insurance',
  Dine: 'Dine',
  Shopping: 'Shopping',
  Entertainment: 'Entertainment',
  Travel: 'Travel',
  Load_EMI: 'Load_EMI',
  Savings_Transfers: 'Savings_Transfers',
  Investments: 'Investments',
  Education: 'Education',
  Health: 'Health',
  Income: 'Income',
  Taxes: 'Taxes'
};

exports.Prisma.ModelName = {
  User: 'User',
  CommercialClients: 'CommercialClients',
  Accounts: 'Accounts',
  Transactions: 'Transactions',
  Verification: 'Verification',
  Auth_codes: 'Auth_codes',
  Tokens: 'Tokens'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
