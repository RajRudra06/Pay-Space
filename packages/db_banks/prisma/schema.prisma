generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_DB_BANK")
}

model User {
  id              Int               @id @default(autoincrement())
  email           String?           
  username        String?
  number          String            
  password        String
  DOB             DateTime  @default(now())
  bankName        Bank_name         @default(notdefined)
  isVerified      Boolean           @default(false)
  accounts        Accounts[]
  accountsDetails AccountsDetails[]
  auth_code       Auth_codes[]
  tokens          Tokens[]
  verification    Verification[]

  @@unique([number, bankName])
  @@unique([email, bankName])
}

model CommercialClients {
  id            Int      @id @default(autoincrement())
  client_id     String   @unique
  assigned_date DateTime
  sharedSecret  String   @unique
  expiresAt     DateTime
  tokens        Tokens[]

  @@index([client_id])
  @@index([expiresAt])
}

model AccountsDetails {
  acc_det_id       Int        @id @default(autoincrement())
  acc_id           Int
  user_id          Int
  firstName        String
  lastName         String
  DOB              DateTime
  Gender           gender
  fatherName       String
  motherName       String
  aadhaarNumber    String     @db.Char(12)
  panNumber        String     @db.Char(10)
  email            String
  phoneNumber      String     @db.Char(10)
  address          String
  City             String
  State            String
  pincode          String     @db.Char(6)
  Occupation       occupation
  monthlyIncome    String
  nomineeFirstname String
  nomineeLastname  String
  relationship     String
  accounts         Accounts   @relation(fields: [acc_id], references: [acc_id])
  user             User       @relation(fields: [user_id], references: [id])
}

model Accounts {
  acc_id          Int               @id @default(autoincrement())
  user_id         Int
  acc_name        String
  acc_number      String
  status          Acc_status
  hold_amount     Decimal  @default(0)
  type            Acc_type
  bank            Bank_name
  ifscCode        String @db.VarChar(11) @default("ABCDE123FGH")
  balance         Decimal           @db.Decimal(12, 2) @default(1500.00)
  connectedToMain Boolean
  created_At      DateTime
  user            User              @relation(fields: [user_id], references: [id])
  accountsDetails AccountsDetails[]
  transactions    Transactions[]

  @@unique([user_id, bank, acc_name, type])
}

model Transactions {
  txn_id           Int         @id @default(autoincrement())
  acc_id           Int
  txnRef           String       @default("notdefined")
  status           Txn_status
  type             Txn_type
  created_At       DateTime 
  process_At       DateTime      @default(now())
  channel          Txn_channel  
  counterPartyID   String
  counterPartyType String
  category         Txn_Cat
  Amount           Int?
  accounts         Accounts    @relation(fields: [acc_id], references: [acc_id])
}

model Verification {
  id        Int      @id @default(autoincrement())
  user_id   Int
  otp       String
  type      String
  expiresAt DateTime
  user      User     @relation(fields: [user_id], references: [id])
}

model Auth_codes {
  id           Int      @id @default(autoincrement())
  code         String
  client_id    String
  redirect_uri String
  createdAt    DateTime
  expiresAt    DateTime
  used         Boolean  @default(false)
  user_id      Int
  user         User     @relation(fields: [user_id], references: [id])

  @@index([user_id, client_id])
  @@index([code])
  @@index([expiresAt])
}

model Tokens {
  id                Int               @id @default(autoincrement())
  user_id           Int
  client_id         String
  hashedToken       String
  created_At        DateTime          @default(now())
  expiresAt         DateTime
  revoked           Boolean           @default(false)
  bankName          String
  commercialClients CommercialClients @relation(fields: [client_id], references: [client_id])
  user              User              @relation(fields: [user_id], references: [id])

  @@unique([user_id, bankName])
  @@index([user_id, client_id])
}

enum gender {
  male
  female
  other
}

enum occupation {
  Student
  Employee
  SelfEmployed
  Business
  Retired
  Homemaker
  Other
}

enum Txn_status {
  success
  failed
  pending
}

enum Acc_status {
  active
  closed
  frozen
}

enum Txn_type {
  credit
  debit
}

enum Acc_type {
  savings
  checking
  wallet
  joint
  business
}

enum Txn_channel {
  upi
  wallet
  netbanking
  card
  cheque
  cheque_DD
  RTGS
  NEFT
  IMPS
}

enum Bank_name {
  icici
  sbi
  hdfc
  ubi
  notdefined
}

enum Txn_Cat {
  Utilities
  Insurance
  Dine
  Shopping
  Entertainment
  Travel
  Load_EMI
  Savings_Transfers
  Investments
  Education
  Health
  Income
  Taxes
}
